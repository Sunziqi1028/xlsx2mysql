// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TProductionOrderDao is the data access object for table t_production_order.
type TProductionOrderDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns TProductionOrderColumns // columns contains all the column names of Table for convenient usage.
}

// TProductionOrderColumns defines and stores column names for table t_production_order.
type TProductionOrderColumns struct {
	Id                     string // id
	ProductionId           string // 生产订单号
	OutputMaterialCode     string // 产出物料编码
	OutputMaterialName     string // 产出物料名称
	OutputRequiredQuantity string // 产出需求数量
	OutputUnit             string // 产出单位
	QuantityInWarehouse    string // 已入库数量
	QuantityNotInWarehouse string // 未入库数量
	StartWorkTime          string // 开工时间
	PlanedCompletionTime   string // 计划完工时间
	InputMaterialCode      string // 投入物料编码
	InputRequiredUnit      string // 投入需求单位
	InputRequiredQuantity  string // 投入需求数量
	ReceivedQuantity       string // 已领数量
	UnreceivedQuantity     string // 未领数量
	InApply                string // 出库申请 0 未发送 1 已发送
	OutApply               string // 入库申请 0 未发送 1 已发送
	CreatedAt              string // 创建时间
	UpdatedAt              string // 更新时间
	DeletedAt              string // 删除时间
}

//  tProductionOrderColumns holds the columns for table t_production_order.
var tProductionOrderColumns = TProductionOrderColumns{
	Id:                     "id",
	ProductionId:           "production_id",
	OutputMaterialCode:     "output_material_code",
	OutputMaterialName:     "output_material_name",
	OutputRequiredQuantity: "output_required_quantity",
	OutputUnit:             "output_unit",
	QuantityInWarehouse:    "quantity_in_warehouse",
	QuantityNotInWarehouse: "quantity_not_in_warehouse",
	StartWorkTime:          "start_work_time",
	PlanedCompletionTime:   "planed_completion_time",
	InputMaterialCode:      "input_material_code",
	InputRequiredUnit:      "input_required_unit",
	InputRequiredQuantity:  "input_required_quantity",
	ReceivedQuantity:       "received_quantity",
	UnreceivedQuantity:     "unreceived_quantity",
	InApply:                "in_apply",
	OutApply:               "out_apply",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	DeletedAt:              "deleted_at",
}

// NewTProductionOrderDao creates and returns a new DAO object for table data access.
func NewTProductionOrderDao() *TProductionOrderDao {
	return &TProductionOrderDao{
		group:   "default",
		table:   "t_production_order",
		columns: tProductionOrderColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TProductionOrderDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TProductionOrderDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TProductionOrderDao) Columns() TProductionOrderColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TProductionOrderDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TProductionOrderDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TProductionOrderDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
